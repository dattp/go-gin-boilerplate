// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"go-gin-boilerplate/internal/app/api/controller"
	"go-gin-boilerplate/internal/app/api/router"
	"go-gin-boilerplate/internal/config"
	"go-gin-boilerplate/internal/database"
	"go-gin-boilerplate/internal/eventbus"
	"go-gin-boilerplate/internal/logger"
	"go-gin-boilerplate/internal/repository"
	"go-gin-boilerplate/internal/service"
)

// Injectors from wire.go:

// InitializeAPI creates all dependencies for the API server
func InitializeAPI() (*Server, error) {
	configConfig, err := config.LoadConfig()
	if err != nil {
		return nil, err
	}
	logrusLogger := logger.GetLogger()
	eventBus := eventbus.NewEventBus(logrusLogger)
	healthService := service.NewHealthService(logrusLogger, eventBus)
	healthController := controller.NewHealthController(healthService)
	mongoDBClient, err := database.NewMongoDBClient(logrusLogger, configConfig)
	if err != nil {
		return nil, err
	}
	noteRepository := repository.NewNoteRepository(mongoDBClient, configConfig)
	client := service.NewAsynqClient(configConfig)
	noteService := service.NewNoteService(noteRepository, logrusLogger, client, eventBus)
	noteController := controller.NewNoteController(noteService)
	routerRouter := router.New(logrusLogger, healthController, noteController)
	redisClient, err := database.NewRedisClient(logrusLogger, configConfig)
	if err != nil {
		return nil, err
	}
	server := New(configConfig, logrusLogger, routerRouter, healthController, redisClient, mongoDBClient, eventBus)
	return server, nil
}
