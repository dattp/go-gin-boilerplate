// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"go-gin-boilerplate/internal/app/worker/handler"
	"go-gin-boilerplate/internal/config"
	"go-gin-boilerplate/internal/database"
	"go-gin-boilerplate/internal/eventbus"
	"go-gin-boilerplate/internal/logger"
	"go-gin-boilerplate/internal/service"
)

// Injectors from wire.go:

// InitializeWorker creates all dependencies for the worker
func InitializeWorker() (*Server, error) {
	configConfig, err := config.LoadConfig()
	if err != nil {
		return nil, err
	}
	logrusLogger := logger.GetLogger()
	noteHandler := handler.NewNoteHandler(logrusLogger)
	workerService := service.NewWorkerService(logrusLogger, configConfig, noteHandler)
	redisClient, err := database.NewRedisClient(logrusLogger, configConfig)
	if err != nil {
		return nil, err
	}
	mongoDBClient, err := database.NewMongoDBClient(logrusLogger, configConfig)
	if err != nil {
		return nil, err
	}
	eventBus := eventbus.NewEventBus(logrusLogger)
	server := New(configConfig, logrusLogger, workerService, redisClient, mongoDBClient, eventBus)
	return server, nil
}
